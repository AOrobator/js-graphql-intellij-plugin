directive @onField on FIELD

interface Node {
    id: ID!
}

type Query {
    human(id: ID!): Human
    node(id: ID!): Node
    nodes(ids: [ID]!): [Node]
}

type Mutation {
    hello(message: String!): String
}

type Human implements Node {
    id: ID!
    name: String!
    enumField: MyEnum
    fieldWithArg(height: Units, another: String): Float
    fieldWithInput(input: MyInput): String
    search(text: String!): [SearchResult]
}

type Ship implements Node {
    id: ID!
    range: Float
}

union SearchResult = Human | Ship

extend type Human {
    extended: Boolean
}

enum MyEnum {
    Value1,
    Value2
}

enum Units {
    Metric,
    Imperial
}

input MyInput {
    inputField1: String
    nestedField: [MyNestedInput]
}

input MyNestedInput {
    val: Float
}